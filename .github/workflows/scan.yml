# Code scan for software release

name: 'Scan'
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  precheck:
    runs-on: [self-hosted, scan]
    continue-on-error: true
    outputs:
      should_run: ${{ steps.set_condition.outputs.should_run }}
    steps:
      - name: Set condition for PR title or commit message
        id: set_condition
        run: |
          echo "Checking PR title or commit message..."
          TYPES_TO_SKIP=("ci" "docs")
          should_run=true
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            for type in "${TYPES_TO_SKIP[@]}"; do
              if [[ "${{ github.event.pull_request.title }}" == "$type:"* ]]; then
                echo "Skip because PR title starts with '$type:'"
                should_run=false
                break
              fi
            done
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            for type in "${TYPES_TO_SKIP[@]}"; do
              if [[ "${{ github.head_commit.message }}" == "$type:"* ]]; then
                echo "Skip because commit message starts with '$type:'"
                should_run=false
                break
              fi
            done
          fi
          echo "should_run=$should_run" >> $GITHUB_OUTPUT

  bandit:
    name: Bandit
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: amr-registry.caas.intel.com
          username: ${{ secrets.CI_USR }}
          password: ${{ secrets.CI_PWD }}

      # release package must be in the directory
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          mkdir -p ${RLDIR} && rsync -av --progress $(ls -I ${RLDIR}) ${RLDIR}/ --exclude .git --exclude .github --exclude automation

      - name: Execute bandit scan
        uses: intel-innersource/frameworks.devops.github.actions.bandit@main
        with:
          scan_path: '${{ env.STEP_PACKAGE_NAME }}'

  virus-scan:
    name: Virus Scan
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # release package must be in the directory
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          mkdir -p ${RLDIR} && rsync -av --progress $(ls -I ${RLDIR}) ${RLDIR}/ --exclude .git --exclude .github --exclude automation

      - name: Execute virus scan
        uses: intel-innersource/frameworks.devops.github.actions.mcafee@main
        with:
          scan_path: '${{ env.STEP_PACKAGE_NAME }}'
          fail_build: false

  shellcheck:
    name: ShellCheck
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    env:
      SHELLCHECK_OPTS: ""
      # Notes:
      # - [optional] replace SHELLCHECK_EXIT_CODE value to 1 if you are enabling ShellCheck as a static code analysis tool
      SHELLCHECK_EXIT_CODE: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find shell script files
        id: find_files
        run: |
          find . \
            -name .git -type d -prune -o \
            -type f -name \*.sh \
            -print0 > shell_files.txt
          tr '\0' '\n' < shell_files.txt > shell_files_readable.txt
          total_files=$(wc -l < shell_files_readable.txt)
          echo "Total number of shell script files to be scanned: $total_files"
          cat shell_files_readable.txt

      - name: Execute ShellCheck
        run: |
          xargs -0 -r -n1 shellcheck < shell_files.txt 2>&1 | tee shellcheck.log
          if [ -s "shellcheck.log" ]; then
            grep -oP 'In \K[^\s:]+' shellcheck.log | sort -u > shellcheck_summary.txt
            total_issues=$(grep -c '^In ' shellcheck.log)
            echo "::error::Found $total_issues issues!"
            exit ${{ env.SHELLCHECK_EXIT_CODE }}
          else
            echo "No issues found by ShellCheck" > shellcheck.log
          fi

      - name: Preview ShellCheck Summary
        if: always()
        run: |
          {
            echo "Total number of shell script files to be scanned: $(wc -l < shell_files_readable.txt)"
            echo "Files scanned:"
            cat shell_files_readable.txt
            echo ""
            if [ -f shellcheck_summary.txt ]; then
              echo "Files with issues:"
              cat shellcheck_summary.txt
              total_files_with_issues=$(wc -l < shellcheck_summary.txt)
              total_issues=$(grep -c '^In ' shellcheck.log)
              echo "Total number of files with issues: $total_files_with_issues"
              echo "Total number of issues: $total_issues"
              echo "Issue types and their counts:"
              grep -oP 'SC[0-9]+' shellcheck.log | sort | uniq -c | sort -nr
            else
              echo "No issues found by ShellCheck"
            fi
          } | tee shellcheck_summary.log

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Shellcheck Reports
          path: |
            shellcheck.log
            shellcheck_summary.log

  trivy:
    name: Trivy
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Execute Trivy - csv
        run: |
          trivy fs \
            --format template --template  @/home/user/.ci/csv.tpl \
            --exit-code  1 \
            --vuln-type os,library \
            --severity  UNKNOWN,LOW,MEDIUM,CRITICAL,HIGH \
            --output  trivy_fs_report.csv \
            --list-all-pkgs .

      - name: Preview Trivy report
        if: always()
        run: |
          if [ -f "trivy_fs_report.csv" ]; then
            cat trivy_fs_report.csv
          else
            echo "Trivy report file not found."
          fi

      - name: Upload artifact - csv
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Trivy Reports
          path: "trivy_fs_report.csv"

  trivy-sbom:
    name: Trivy SBOM
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Execute Trivy
        run: |
          ls -l ~/.ci/csv.tpl
          trivy fs \
            --format spdx-json \
            --output  trivy_fs_sbom_report.json .

      - name: Upload artifact 
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Trivy SBOM Reports
          path: "trivy_fs_sbom_report.json"

  trivy-config-dockerfile:
    name: Trivy Dockerfile
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Execute Trivy
        run: |
          trivy config \
            --exit-code  1 \
            --file-patterns "dockerfile:.*dockerfile" \
            --skip-dirs "**/node_modules" \
            --format json --output ct222-report.json .

      - name: Preview Trivy report
        if: always()
        run: |
          if [ -f "ct222-report.json" ]; then
            cat ct222-report.json
          else
            echo "Trivy report file not found."
          fi

      - name: Upload artifact 
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Trivy Dockerfile Linting Reports
          path: "ct222-report.json"

  bdba:
    name: BDBA
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    env:
      STEP_GROUP_ID: '246'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # release package must .zip file
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          zip -r ${RLDIR}.zip . -x "*.git*" "*.github*" "automation"

      - name: Execute BDBA
        uses: intel-innersource/frameworks.devops.github.actions.bdba@main
        with:
          username: ${{ secrets.CI_USR }}
          password: ${{ secrets.CI_PWD }}
          # token: ${{ secrets.CI_BDBA_TOKEN }}
          group: ${{ env.STEP_GROUP_ID }}
          scan_path: '${{ env.STEP_PACKAGE_NAME }}.zip'

  protex:
    name: Protex
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # release package must be in the directory
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          mkdir -p ${RLDIR} && rsync -av --progress $(ls -I ${RLDIR}) ${RLDIR}/ --exclude .git --exclude .github --exclude automation

      - name: Execute Protex
        uses: intel-innersource/frameworks.actions.protex@main
        with:
          # project_name must matched with the project that already created
          project_name: Edge Developer Kit Reference Scripts
          server: https://garprotex010.devtools.intel.com
          user: ${{ secrets.CI_USR }}
          password: ${{ secrets.CI_PWD }}
          path: '${{ env.STEP_PACKAGE_NAME }}'

  coverity:
    name: Coverity
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: [self-hosted, scan]
    env:
      # Notes:
      # - [required] please REPLACE with your own Coverity server URL
      COV_SERVER_URL: https://coverityent.devtools.intel.com/prod1
      # Notes:
      # - [required] please REPLACE with your own Coverity Project name
      COV_PROJECT_NAME: Edge Developer Kit Reference Script
      # Notes:
      # - [required] please REPLACE with your own Coverity Stream name
      COV_STREAM_NAME: devkit-main-stream
      COV_ANALYSIS_VERSION: 2024.6.1
      COV_REPORT_VERSION: 2024.6.1
      COV_AUTH_KEY_NAME: "coverity_auth_key"
      COV_REPORT_NAME: "coverity_report"
      COV_SECURITY_REPORT_NAME: "coverity_security_report"
      COV_CVSS_REPORT_NAME: "coverity_cvss_report"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract branch or commit ID
        id: extract_version
        run: |
          # Extract the branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          # Check if the branch name is empty or not
          echo "BRANCH_NAME: ${BRANCH_NAME}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          if [ -z "$BRANCH_NAME" ]; then
            # Use the commit ID if the branch name is not defined
            BRANCH_VERSION=${GITHUB_SHA}
          else
            # Use the branch name as the version
            BRANCH_VERSION=$BRANCH_NAME
          fi
          echo "Extracted version: $BRANCH_VERSION"
          echo "BRANCH_VERSION=$BRANCH_VERSION" >> $GITHUB_ENV

      # Notes:
      # - [info] release package must be in the directory
      # - [optional] customize this step for your own release package
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          mkdir -p ${RLDIR} && rsync -av --progress $(ls -I ${RLDIR}) ${RLDIR}/ \
            --exclude .git \
            --exclude .github \
            --exclude automation \
            --exclude Dockerfile \
            --exclude 'docker-compose*.yml'
      
      - name: Setup Coverity
        uses: intel-innersource/frameworks.actions.setup-coverity@v4
        with:
          analysis-version: ${{ env.COV_ANALYSIS_VERSION }}
          reports-version: ${{ env.COV_REPORT_VERSION }}

      - name: Execute Coverity Analysis
        uses: intel-innersource/frameworks.actions.coverity-analysis@v4
        id: cov-analysis
        with:
          compiler-type: |
            python
          source: '${{ env.STEP_PACKAGE_NAME }}'
          url: ${{ env.COV_SERVER_URL }}
          project: ${{ env.COV_PROJECT_NAME }}
          stream: ${{ env.COV_STREAM_NAME }}
          user: ${{ secrets.CI_USR }}
          password: ${{ secrets.CI_PWD }}

      - name: Generate Coverity Report
        if: always()
        uses: intel-innersource/frameworks.actions.coverity-analysis/sdl-reports@v4
        with:
          snapshot: ${{steps.cov-analysis.outputs.snapshot}}
          url: ${{ env.COV_SERVER_URL }}
          project: ${{ env.COV_PROJECT_NAME }}
          project-version: ${{ env.BRANCH_VERSION }}
          cvss-report-name: CT39_${{ env.COV_CVSS_REPORT_NAME }}.pdf
          security-report-name: CT39_${{ env.COV_SECURITY_REPORT_NAME }}.pdf
          user: ${{ secrets.CI_USR }}
          password: ${{ secrets.CI_PWD }}

      - name: Generate Coverity Report Summary
        id: cov-report-summary
        if: always()
        run: |
          export TEMP_COV_PASSWORD=${{ secrets.CI_PWD }}
          echo -e "\033[35mGenerating authentication key file - coverity_auth_key.txt\033[0m"
          EXPIRATION_TIME=$(date -u -d "30 minutes" +"%Y-%m-%dT%H:%M:%SZ")
          cov-manage-im \
            --mode auth-key \
            --create \
            --output-file ${{ env.COV_AUTH_KEY_NAME }}.txt \
            --set description:"ci_auth_key - ${{ env.BRANCH_VERSION }}" \
            --url ${{ env.COV_SERVER_URL }} \
            --user ${{ secrets.CI_USR }} \
            --password ${{ secrets.CI_PWD }} \
            --set expiration:"${EXPIRATION_TIME}"
          cat ${{ env.COV_AUTH_KEY_NAME }}.txt
          echo -e "\n\033[35mGenerating Coverity Security JSON Report - ${{ env.COV_SECURITY_REPORT_NAME }}.json\033[0m"
          export WRITE_ISSUES_JSON=${{ env.COV_SECURITY_REPORT_NAME }}.json
          cov-generate-security-report \
            ../../_actions/intel-innersource/frameworks.actions.coverity-analysis/v4/templates/report_template.yml \
            --output ${{ env.COV_SECURITY_REPORT_NAME }}.pdf \
            --user ${{ secrets.CI_USR }} \
            --password env:TEMP_COV_PASSWORD
          echo -e "\033[35mGenerating Coverity CVSS JSON Report ${{ env.COV_CVSS_REPORT_NAME }}_summary.json\033[0m"
          export WRITE_ISSUES_JSON=${{ env.COV_CVSS_REPORT_NAME }}.json
          cov-generate-cvss-report \
            --report ../../_actions/intel-innersource/frameworks.actions.coverity-analysis/v4/templates/report_template.yml \
            --output ${{ env.COV_CVSS_REPORT_NAME }}.pdf \
            --user ${{ secrets.CI_USR }} \
            --password env:TEMP_COV_PASSWORD
          echo -e "\033[35mGenerating IPAS Security Report Summary - IPAS_${{ env.COV_SECURITY_REPORT_NAME }}_summary.html\033[0m"
          python3 ~/.ci/IPAS_Report.py \
            -i ${{ env.COV_SECURITY_REPORT_NAME }}.json \
            -t SECURITY \
            --details True \
            --version ${{ env.COV_ANALYSIS_VERSION }} \
            --output IPAS_${{ env.COV_SECURITY_REPORT_NAME }}_summary.html \
            --csv-file IPAS_${{ env.COV_SECURITY_REPORT_NAME }}_summary.csv \
            --auth-key-file ${{ env.COV_AUTH_KEY_NAME }}.txt
          echo -e "\033[35mGenerating IPAS CVSS Report Summary - IPAS_${{ env.COV_CVSS_REPORT_NAME }}_summary.html\033[0m"
          python3 ~/.ci/IPAS_Report.py \
            -i ${{ env.COV_CVSS_REPORT_NAME }}.json \
            -t CVSS \
            --details True \
            --version ${{ env.COV_ANALYSIS_VERSION }} \
            --output IPAS_${{ env.COV_CVSS_REPORT_NAME }}_summary.html \
            --csv-file IPAS_${{ env.COV_CVSS_REPORT_NAME }}_summary.csv \
            --auth-key-file ${{ env.COV_AUTH_KEY_NAME }}.txt
          ls -l

      - name: Upload artifacts
        if: ${{ always() && steps.cov-report-summary.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: Coverity Report Summary
          path: |
            ${{ env.COV_SECURITY_REPORT_NAME }}.json
            ${{ env.COV_CVSS_REPORT_NAME }}.json
            ${{ env.COV_SECURITY_REPORT_NAME }}.pdf
            ${{ env.COV_CVSS_REPORT_NAME }}.pdf
            IPAS_${{ env.COV_SECURITY_REPORT_NAME }}_summary.html
            IPAS_${{ env.COV_SECURITY_REPORT_NAME }}_summary.csv
            IPAS_${{ env.COV_CVSS_REPORT_NAME }}_summary.html
            IPAS_${{ env.COV_CVSS_REPORT_NAME }}_summary.csv