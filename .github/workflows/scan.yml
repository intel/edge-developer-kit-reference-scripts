# Code scan for software release

name: 'Scan'
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  bandit:
    name: Bandit
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Login to Harbor
        uses: docker/login-action@v2
        with:
          registry: amr-registry.caas.intel.com
          username: ${{ secrets.CI_USR }}
          password: ${{ secrets.CI_PWD }}

      # release package must be in the directory
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          mkdir -p ${RLDIR} && rsync -av --progress $(ls -I ${RLDIR}) ${RLDIR}/ --exclude .git --exclude .github

      - name: Execute bandit scan
        uses: intel-innersource/frameworks.devops.github.actions.bandit@main
        with:
          scan_path: '${{ env.STEP_PACKAGE_NAME }}'

  virus-scan:
    name: Virus Scan
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # release package must be in the directory
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          mkdir -p ${RLDIR} && rsync -av --progress $(ls -I ${RLDIR}) ${RLDIR}/ --exclude .git --exclude .github

      - name: Execute virus scan
        uses: intel-innersource/frameworks.devops.github.actions.mcafee@main
        with:
          scan_path: '${{ env.STEP_PACKAGE_NAME }}'
          fail_build: false

  shellcheck:
    name: ShellCheck
    runs-on: [self-hosted, scan]
    env:
      SHELLCHECK_OPTS: ""
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute ShellCheck
        run: |
          find . -name .git -type d -prune -o -type f -name \*.sh -print0 |
          xargs -0 -r -n1 shellcheck |
          tee shellcheck.log
          if [ -s "shellcheck.log" ]; then
            exit 1
          else
            echo "No issues found by ShellCheck" > shellcheck.log
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Shellcheck Reports
          path: shellcheck.log

  trivy:
    name: Trivy
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute Trivy - csv
        uses: intel-innersource/frameworks.actions.trivy@main
        with:
          TRIVY_DEBUG: 'true'
          TRIVY_EXIT_CODE: '1'
          TRIVY_IGNORES: ''
          TRIVY_LIST_ALL: 'true'
          TRIVY_OUTPUT_FILE: 'trivy_fs_report.csv'
          TRIVY_REPORT_FORMAT: 'template'
          TRIVY_SCAN_TYPE: 'fs'
          TRIVY_SCAN_PATH: '.'
          TRIVY_SEVERITY: 'UNKNOWN,LOW,MEDIUM,CRITICAL,HIGH'
          TRIVY_TEMPLATE: '@/templates/csv.tmpl'
          TRIVY_VULN_TYPE: 'os,library'

      - name: Upload artifact - csv
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Trivy Reports
          path: "trivy_fs_report.csv"

  trivy-sbom:
    name: Trivy SBOM
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute Trivy
        uses: intel-innersource/frameworks.actions.trivy@main
        with:
          TRIVY_DEBUG: 'true'
          TRIVY_OUTPUT_FILE: 'trivy_fs_report.spdx'
          TRIVY_REPORT_FORMAT: 'spdx'
          TRIVY_SCAN_TYPE: 'fs'
          TRIVY_SCAN_PATH: '.'
          TRIVY_SEVERITY: 'UNKNOWN,LOW,MEDIUM,CRITICAL,HIGH'
          TRIVY_VULN_TYPE: 'os,library'

      - name: Upload artifact 
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Trivy SBOM Reports
          path: "trivy_fs_report.spdx"

  bdba:
    name: BDBA
    runs-on: [self-hosted, scan]
    env:
      STEP_GROUP_ID: '32'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # release package must .zip file
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          zip -r ${RLDIR}.zip . -x "*.git*" "*.github*"

      - name: Execute BDBA
        uses: intel-innersource/frameworks.devops.github.actions.bdba@main
        with:
          username: ${{ secrets.CI_USR }}
          password: ${{ secrets.CI_PWD }}
          # token: ${{ secrets.CI_BDBA_TOKEN }}
          group: ${{ env.STEP_GROUP_ID }}
          scan_path: '${{ env.STEP_PACKAGE_NAME }}.zip'

  protex:
    name: Protex
    runs-on: [self-hosted, scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # release package must be in the directory
      - name: Prepare release package
        run: |
          RLDIR="release_$(echo ${GITHUB_SHA:0:7})"
          echo "STEP_PACKAGE_NAME=${RLDIR}" >> $GITHUB_ENV
          mkdir -p ${RLDIR} && rsync -av --progress $(ls -I ${RLDIR}) ${RLDIR}/ --exclude .git --exclude .github

      - name: Execute Protex
        uses: intel-innersource/frameworks.actions.protex@main
        with:
          # project_name must matched with the project that already created
          project_name: Edge Developer Kit Reference Scripts
          server: https://garprotex010.devtools.intel.com
          user: ${{ secrets.CI_USR }}
          password: ${{ secrets.CI_PWD }}
          path: '${{ env.STEP_PACKAGE_NAME }}'
